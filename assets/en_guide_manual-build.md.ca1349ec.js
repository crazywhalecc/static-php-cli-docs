import{_ as s,c as a,o as e,U as n}from"./chunks/framework.a73c7ff7.js";const m=JSON.parse('{"title":"Manual Build","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/manual-build.md","filePath":"en/guide/manual-build.md"}'),o={name:"en/guide/manual-build.md"},l=n(`<h1 id="manual-build" tabindex="-1">Manual Build <a class="header-anchor" href="#manual-build" aria-label="Permalink to &quot;Manual Build&quot;">​</a></h1><h3 id="manual-build-using-spc-binary" tabindex="-1">Manual build (using SPC binary) <a class="header-anchor" href="#manual-build-using-spc-binary" aria-label="Permalink to &quot;Manual build (using SPC binary)&quot;">​</a></h3><p>This project provides a binary file of static-php-cli. You can directly download the binary file of the corresponding platform and then use it to build static PHP. Currently, the platforms supported by <code>spc</code> binary are Linux and macOS.</p><p>Here&#39;s how to download from GitHub Actions:</p><ol><li>Enter <a href="https://github.com/crazywhalecc/static-php-cli/actions/workflows/release-build.yml" target="_blank" rel="noreferrer">GitHub Actions</a>.</li><li>Select the latest build task, select <code>Artifacts</code>, and download the binary file of the corresponding platform.</li><li>Unzip the <code>.zip</code> file. After decompressing, add execution permissions to it: <code>chmod +x ./spc</code>.</li></ol><p>You can also download binaries from a self-hosted server: <a href="https://dl.static-php.dev/static-php-cli/spc-bin/nightly/" target="_blank" rel="noreferrer">enter</a>.</p><h3 id="manual-build-using-source-code" tabindex="-1">Manual build (using source code) <a class="header-anchor" href="#manual-build-using-source-code" aria-label="Permalink to &quot;Manual build (using source code)&quot;">​</a></h3><p>Currently, it supports building on macOS and Linux. macOS supports the latest version of the operating system and two architectures, while Linux supports Debian and derivative distributions, as well as Alpine Linux.</p><p>Because this project itself is developed using PHP, it is also necessary to install PHP on the system during compilation. This project also provides static binary PHP suitable for this project, which can be selected and used according to actual situations.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># clone repo</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/crazywhalecc/static-php-cli.git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--depth=1</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">static-php-cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># You need to install the PHP environment first before running Composer and this project. The installation method can be referred to below.</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span></code></pre></div><h3 id="use-system-php" tabindex="-1">Use System PHP <a class="header-anchor" href="#use-system-php" aria-label="Permalink to &quot;Use System PHP&quot;">​</a></h3><p>Below are some example commands for installing PHP and Composer in the system. It is recommended to search for the specific installation method yourself or ask the AI search engine to obtain the answer, which will not be elaborated here.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># [macOS], need install Homebrew first. See https://brew.sh/</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Remember change your composer executable path. For M1/M2 Chip mac, &quot;/opt/homebrew/bin/&quot;, for Intel mac, &quot;/usr/local/bin/&quot;. Or add it to your own path.</span></span>
<span class="line"><span style="color:#FFCB6B;">brew</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wget</span></span>
<span class="line"><span style="color:#FFCB6B;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://getcomposer.org/download/latest-stable/composer.phar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-O</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/your/bin/composer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/your/bin/composer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [Debian], you need to make sure your php version &gt;= 8.1 and composer &gt;= 2.0</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php-tokenizer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># [Alpine]</span></span>
<span class="line"><span style="color:#FFCB6B;">apk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xz</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php81</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php81-common</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php81-pcntl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php81-tokenizer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php81-phar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php81-posix</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php81-xml</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">composer</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Currently, some versions of Ubuntu install older PHP versions, so no installation commands are provided. If necessary, it is recommended to add software sources such as ppa first, and then install the latest version of PHP and tokenizer, XML, and phar extensions.</p><p>Older versions of Debian may have an older (&lt;= 7.4) version of PHP installed by default, it is recommended to upgrade Debian first.</p></div><h3 id="use-docker" tabindex="-1">Use Docker <a class="header-anchor" href="#use-docker" aria-label="Permalink to &quot;Use Docker&quot;">​</a></h3><p>If you don&#39;t want to install PHP and Composer runtime environment on your system, you can use the built-in Docker environment build script.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># To use directly, replace \`bin/spc\` with \`bin/spc-alpine-docker\` in all used commands</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc-alpine-docker</span></span></code></pre></div><p>The first time the command is executed, <code>docker build</code> will be used to build a Docker image. The default built Docker image is the <code>x86_64</code> architecture, and the image name is <code>cwcc-spc-x86_64</code>.</p><p>If you want to build <code>aarch64</code> static-php-cli in <code>x86_64</code> environment, you can use qemu to emulate the arm image to run Docker, but the speed will be very slow. Use command: <code>SPC_USE_ARCH=aarch64 bin/spc-alpine-docker</code>.</p><p>If it prompts that sudo is required to run after running, execute the following command once to grant static-php-cli permission to execute sudo:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> SPC_USE_SUDO</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">yes</span></span></code></pre></div><h3 id="use-precompiled-static-php-binaries" tabindex="-1">Use Precompiled Static PHP Binaries <a class="header-anchor" href="#use-precompiled-static-php-binaries" aria-label="Permalink to &quot;Use Precompiled Static PHP Binaries&quot;">​</a></h3><p>If you don&#39;t want to use Docker and install PHP in the system, you can directly download the php binary cli program compiled by this project itself. The usage process is as follows:</p><p>Deploy the environment using the command, the command will download a static php-cli binary from <a href="https://dl.zhamao.xin/static-php-cli/" target="_blank" rel="noreferrer">self-hosted server</a>. Next, it will automatically download Composer from <a href="https://getcomposer.org/download/latest-stable/composer.phar" target="_blank" rel="noreferrer">getcomposer</a> or <a href="https://mirrors.aliyun.com/composer/composer.phar" target="_blank" rel="noreferrer">Aliyun mirror</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Using precompiled static PHP binaries is currently only supported on Linux and macOS. The FreeBSD environment is currently not supported due to the lack of an automated build environment.</p></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bin/setup-runtime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># For users with special network environments such as mainland China, you can use mirror sites (aliyun) to speed up the download speed</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/setup-runtime</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mirror</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">china</span></span></code></pre></div><p>This script will download two files in total: <code>bin/php</code> and <code>bin/composer</code>. After the download is complete, there are two ways to use it:</p><ol><li>Add the <code>bin/</code> directory to the PATH: <code>export PATH=&quot;/path/to/your/static-php-cli/bin:$PATH&quot;</code>, after adding the path, it is equivalent to installing PHP in the system, you can directly Use commands such as <code>composer</code>, <code>php -v</code>, or directly use <code>bin/spc</code>.</li><li>Direct call, such as executing static-php-cli command: <code>bin/php bin/spc --help</code>, executing Composer: <code>bin/php bin/composer update</code>.</li></ol><h2 id="command-download" tabindex="-1">Command - download <a class="header-anchor" href="#command-download" aria-label="Permalink to &quot;Command - download&quot;">​</a></h2><p>Use the command <code>bin/spc download</code> to download the source code required for compilation, including php-src and the source code of various dependent libraries.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Download all dependencies</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Download all dependent packages, and specify the main version of PHP to download, optional: 7.3, 7.4, 8.0, 8.1, 8.2, 8.3</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--with-php=8.2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Show download progress bar while downloading (curl)</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--debug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Delete old download data</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--clean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Download specified dependencies</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php-src,micro,zstd,ext-zstd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Download only extensions and libraries to be compiled (use extensions, including suggested libraries)</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--for-extensions=openssl,swoole,zip,pcntl,zstd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Download only the extensions and dependent libraries to be compiled (use extensions, excluding suggested libraries)</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--for-extensions=openssl,swoole,zip,pcntl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--without-suggestions</span></span></code></pre></div><p>If the network in your area is not good, or the speed of downloading the dependency package is too slow, you can download <code>download.zip</code> which is packaged regularly every week from GitHub Action, and use the command to directly use the zip archive as a dependency.</p><p>Dependent packages can be downloaded locally from <a href="https://github.com/crazywhalecc/static-php-cli/actions/workflows/download-cache.yml" target="_blank" rel="noreferrer">Action</a>. Enter Action and select a latest Workflow that has been successfully run, and download <code>download-files-x.y</code>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--from-zip=/path/to/your/download.zip</span></span></code></pre></div><p>If a source cannot be downloaded all the time, or you need to download some specific version of the package, such as downloading the beta version of PHP, the old version of the library, etc., you can use the parameter <code>-U</code> or <code>--custom-url</code> to rewrite the download link, Make the downloader force the link you specify to download packages from this source. The method of use is <code>{source-name}:{url}</code>, which can rewrite the download URLs of multiple libraries at the same time. Also, it is available when downloading with the <code>--for-extensions</code> option.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Specifying to download a beta version of PHP8.3</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-U</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">php-src:https://downloads.php.net/~eric/php-8.3.0beta1.tar.gz</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Specifying to download an older version of the curl library</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-U</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">curl:https://curl.se/download/curl-7.88.1.tar.gz</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h2 id="command-doctor" tabindex="-1">Command - doctor <a class="header-anchor" href="#command-doctor" aria-label="Permalink to &quot;Command - doctor&quot;">​</a></h2><p>If you can run <code>bin/spc</code> normally but cannot compile static PHP or dependent libraries normally, you can run <code>bin/spc doctor</code> first to check whether the system itself lacks dependencies.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Quick check</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">doctor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Quickly check and fix when it can be automatically repaired (use package management to install dependent packages, only support the above-mentioned operating systems and distributions)</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">doctor</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--auto-fix</span></span></code></pre></div><h2 id="command-build" tabindex="-1">Command - build <a class="header-anchor" href="#command-build" aria-label="Permalink to &quot;Command - build&quot;">​</a></h2><p>Use the build command to start building the static php binary. Before executing the <code>bin/spc build</code> command, be sure to use the <code>download</code> command to download sources. It is recommended to use <code>doctor</code> to check the environment.</p><h3 id="basic-build" tabindex="-1">Basic build <a class="header-anchor" href="#basic-build" aria-label="Permalink to &quot;Basic build&quot;">​</a></h3><p>You need to go to <a href="./extensions.html">Extension List</a> or <a href="./cli-generator.html">Command Generator</a> to select the extension you want to add, and then use the command <code>bin/spc build</code> to compile. You need to specify a compilation target, choose from the following parameters:</p><ul><li><code>--build-cli</code>: Build a cli sapi (command line interface, which can execute PHP code on the command line)</li><li><code>--build-fpm</code>: Build a fpm sapi (php-fpm, used in conjunction with other traditional fpm architecture software such as nginx)</li><li><code>--build-micro</code>: Build a micro sapi (used to build a standalone executable binary containing PHP code)</li><li><code>--build-embed</code>: Build an embed sapi (used to embed into other C language programs)</li><li><code>--build-all</code>: build all above sapi</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Compile PHP with bcmath,curl,openssl,ftp,posix,pcntl extensions, the compilation target is cli</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bcmath,curl,openssl,ftp,posix,pcntl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build-cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Compile PHP with phar,curl,posix,pcntl,tokenizer extensions, compile target is micro</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">phar,curl,posix,pcntl,tokenizer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build-micro</span></span></code></pre></div><h3 id="debug" tabindex="-1">Debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;Debug&quot;">​</a></h3><p>If you encounter problems during the compilation process, or want to view each executing shell command, you can use <code>--debug</code> to enable debug mode and view all terminal logs:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysqlnd,pdo_mysql</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build-all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--debug</span></span></code></pre></div><h3 id="build-options" tabindex="-1">Build Options <a class="header-anchor" href="#build-options" aria-label="Permalink to &quot;Build Options&quot;">​</a></h3><p>During the compilation process, in some special cases, the compiler and the content of the compilation directory need to be intervened. You can try to use the following commands:</p><ul><li><code>--cc=XXX</code>: Specifies the execution command of the C language compiler (Linux default <code>musl-gcc</code> or <code>gcc</code>, macOS default <code>clang</code>)</li><li><code>--cxx=XXX</code>: Specifies the execution command of the C++ language compiler (Linux defaults to <code>g++</code>, macOS defaults to <code>clang++</code>)</li><li><code>--with-clean</code>: clean up old make files before compiling PHP</li><li><code>--enable-zts</code>: Make compiled PHP thread-safe version (default is NTS version)</li><li><code>--no-strip</code>: Do not run <code>strip</code> after compiling the PHP library to trim the binary file to reduce its size (the macOS binary file without trim can use dynamically linked third-party extensions)</li><li><code>--with-libs=XXX,YYY</code>: Compile the specified dependent library before compiling PHP, and activate some extended optional functions (such as libavif of the gd library, etc.)</li><li><code>-I xxx=yyy</code>: Hard compile INI options into PHP before compiling (support multiple options, alias is <code>--with-hardcoded-ini</code>)</li><li><code>--with-micro-fake-cli</code>: When compiling micro, let micro&#39;s <code>PHP_SAPI</code> pretend to be <code>cli</code> (for compatibility with some programs that check <code>PHP_SAPI</code>)</li><li><code>--disable-opcache-jit</code>: Disable opcache jit (enabled by default)</li></ul><p>For hardcoding INI options, it works for cli, micro, embed sapi. Here is a simple example where we preset a larger <code>memory_limit</code> and disable the <code>system</code> function:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bcmath,pcntl,posix</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build-all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-I</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">memory_limit=4G</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-I</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">disable_functions=system</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h2 id="command-micro-combine" tabindex="-1">Command - micro:combine <a class="header-anchor" href="#command-micro-combine" aria-label="Permalink to &quot;Command - micro:combine&quot;">​</a></h2><p>Use the <code>micro:combine</code> command to build the compiled <code>micro.sfx</code> and your code (<code>.php</code> or <code>.phar</code> file) into an executable binary. You can also use this command to directly build a micro binary injected with ini configuration.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Injecting ini configuration refers to adding a special structure after micro.sfx to save ini configuration items before combining micro.sfx with PHP source code.</p><p>micro.sfx can identify the INI file header through a special byte, and the micro can be started with INI through the INI file header.</p><p>The original wiki of this feature is in <a href="https://github.com/easysoft/phpmicro/wiki/INI-settings" target="_blank" rel="noreferrer">phpmicro - Wiki</a>, and this feature may change in the future.</p></div><p>The following is the general usage, directly packaging the php source code into a file:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Before doing the packaging process, you should use \`build --build-micro\` to compile micro.sfx</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;?php echo &#39;hello&#39;;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.php</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">micro:combine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Just use it</span></span>
<span class="line"><span style="color:#FFCB6B;">./my-app</span></span></code></pre></div><p>You can use the following options to specify the file name to be output, and you can also specify micro.sfx in other paths for packaging.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># specify the output filename</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">micro:combine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--output=custom-bin</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Use absolute path</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">micro:combine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-O</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/tmp/my-custom-app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Specify micro.sfx in other locations for packaging</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">micro:combine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--with-micro=/path/to/your/micro.sfx</span></span></code></pre></div><p>If you want to inject ini configuration items, you can use the following parameters to add ini to the executable file from a file or command line option.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Specified using command-line options (-I is shorthand for --with-ini-set)</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">micro:combine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-I</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a=b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-I</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo=bar</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Use ini file specification (-N is shorthand for --with-ini-file)</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">micro:combine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-N</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/your/custom.ini</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note, please do not directly use the PHP source code or the <code>php.ini</code> file in the system-installed PHP, it is best to manually write an ini configuration file that you need, for example:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">; custom.ini</span></span>
<span class="line"><span style="color:#F07178;">curl.cainfo</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">/path/to/your/cafile.pem</span></span>
<span class="line"><span style="color:#F07178;">memory_limit</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">1G</span></span></code></pre></div><p>The ini injection of this command is achieved by appending a special structure after micro.sfx, which is different from the function of inserting hard-coded INI during compilation.</p></div><h2 id="command-extract" tabindex="-1">Command - extract <a class="header-anchor" href="#command-extract" aria-label="Permalink to &quot;Command - extract&quot;">​</a></h2><p>Use the command <code>bin/spc extract</code> to unpack and copy the source code required for compilation, including php-src and the source code of various dependent libraries (you need to specify the name of the library to be unpacked).</p><p>For example, after we have downloaded sources, we want to distribute and execute the build process, manually unpack and copy the package to a specified location, and we can use commands.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Unzip the downloaded compressed package of php-src and libxml2, and store the decompressed source code in the source directory</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">extract</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php-src,libxml2</span></span></code></pre></div><h2 id="dev-command-dev" tabindex="-1">Dev Command - dev <a class="header-anchor" href="#dev-command-dev" aria-label="Permalink to &quot;Dev Command - dev&quot;">​</a></h2><p>Debug commands refer to a collection of commands that can assist in outputting some information when you use static-php-cli to build PHP or modify and enhance the static-php-cli project itself.</p><ul><li><code>dev:extensions</code>: output all currently supported extension names, or output the specified extension information</li><li><code>dev:php-version</code>: output the currently compiled PHP version (by reading <code>php_version.h</code>)</li><li><code>dev:sort-config</code>: Sort the list of configuration files in the <code>config/</code> directory in alphabetical order</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># output all extensions information</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev:extensions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Output the meta information of the specified extension</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev:extensions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mongodb,curl,openssl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Output the specified columns</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Available column name: lib-depends, lib-suggests, ext-depends, ext-suggests, unix-only, type</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev:extensions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--columns=lib-depends,type,ext-depends</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Output the currently compiled PHP version</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># You need to decompress the downloaded PHP source code to the source directory first</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># You can use \`bin/spc extract php-src\` to decompress the source code separately</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev:php-version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Sort the configuration files in the config/ directory in alphabetical order (e.g. ext.json)</span></span>
<span class="line"><span style="color:#FFCB6B;">bin/spc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev:sort-config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ext</span></span></code></pre></div>`,71),t=[l];function p(c,i,r,d,y,u){return e(),a("div",null,t)}const C=s(o,[["render",p]]);export{m as __pageData,C as default};
