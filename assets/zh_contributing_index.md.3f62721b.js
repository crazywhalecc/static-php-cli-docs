import{_ as s,c as o,o as a,U as n}from"./chunks/framework.3f05c8be.js";const A=JSON.parse('{"title":"贡献指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh/contributing/index.md","filePath":"zh/contributing/index.md"}'),l={name:"zh/contributing/index.md"},e=n(`<h1 id="贡献指南" tabindex="-1">贡献指南 <a class="header-anchor" href="#贡献指南" aria-label="Permalink to &quot;贡献指南&quot;">​</a></h1><p>感谢你能够看到这里，本项目非常欢迎你的贡献！</p><h2 id="贡献方法" tabindex="-1">贡献方法 <a class="header-anchor" href="#贡献方法" aria-label="Permalink to &quot;贡献方法&quot;">​</a></h2><p>如果你有代码或文档想要贡献，需要先了解以下内容。</p><ol><li>你要贡献什么类型的代码？（新扩展、修复 Bug、安全问题、项目框架优化、文档）</li><li>如果你贡献了新文件或新片段，你的代码是否经过 <code>php-cs-fixer</code> 和 <code>phpstan</code> 的检查？</li><li>你的贡献代码是否有充足的理由？</li><li>你的贡献代码是否过于复杂？如果是，是否需要拆分？</li></ol><p>如果你可以回答以上四个问题，并已经对代码做出了修改，可以及时在项目 GitHub 仓库发起 Pull Request。待代码审查完毕后，可根据建议修改代码，或直接合并到主分支。</p><h2 id="贡献类型" tabindex="-1">贡献类型 <a class="header-anchor" href="#贡献类型" aria-label="Permalink to &quot;贡献类型&quot;">​</a></h2><p>本项目主要用途是编译静态链接的 PHP 二进制，基于 <code>symfony/console</code> 编写了命令行处理功能。在开发之前，如果你对它不够熟悉， 可以先查看 <a href="https://symfony.com/doc/current/components/console.html" target="_blank" rel="noreferrer">symfony/console 文档</a>。</p><h3 id="安全问题" tabindex="-1">安全问题 <a class="header-anchor" href="#安全问题" aria-label="Permalink to &quot;安全问题&quot;">​</a></h3><p>因为本项目基本上是属于本地运行的 PHP 项目，一般来说不会存在远程攻击行为。但如果你发现了此类问题，请<strong>不要</strong>在 GitHub 仓库提交 PR 或 Issue， 你需要通过 <a href="mailto:admin@zhamao.me" target="_blank" rel="noreferrer">邮件</a> 的方式联系项目维护者（crazywhalecc）。</p><h3 id="修复-bug" tabindex="-1">修复 Bug <a class="header-anchor" href="#修复-bug" aria-label="Permalink to &quot;修复 Bug&quot;">​</a></h3><p>修复 Bug 一般不涉及项目结构和框架的修改，所以如果你可以定位到错误代码并直接修复它，请直接提交 PR。</p><h3 id="新扩展" tabindex="-1">新扩展 <a class="header-anchor" href="#新扩展" aria-label="Permalink to &quot;新扩展&quot;">​</a></h3><p>对于添加一个新扩展来说，你需要先了解一些本项目的基本结构，以及如何根据现有的逻辑添加新扩展。在本页的下一章节将会详细介绍。 总的来说，你需要：</p><ol><li>评估扩展是否可以内联编译到 PHP 中。</li><li>评估扩展的依赖库（如果有）是否可以静态编译。</li><li>写出扩展的依赖库在不同平台编译命令。</li><li>验证扩展及其依赖库能否与现有扩展和依赖库兼容。</li><li>验证扩展在 <code>cli</code>、<code>micro</code>、<code>fpm</code> 几种 SAPI 中均正常工作。</li><li>编写文档，加入你的扩展。</li></ol><h3 id="项目框架优化" tabindex="-1">项目框架优化 <a class="header-anchor" href="#项目框架优化" aria-label="Permalink to &quot;项目框架优化&quot;">​</a></h3><p>如果你已经熟悉 <code>symfony/console</code> 的工作原理，并同时要对项目的框架进行一些修改或优化，请先了解以下事情：</p><ol><li>加入扩展不属于项目框架优化，但如果你在加入新的扩展时发现不得不优化框架，则需先对框架本身进行修改，然后再加入扩展。</li><li>对于一些大规模逻辑修改（例如涉及 LibraryBase、Extension 对象等的修改）时，建议先提交 Issue 或 Draft PR 进行讨论方案。</li><li>项目早期为纯中文开发项目，代码中存在一部分中文的注释。国际化项目后你可以提交 PR 将这些注释翻译为英语。</li><li>请不要在代码中提交包含较多无用的代码片段，例如大量未被使用的变量、方法、类、重复写了很多次的代码。</li></ol><h2 id="项目结构详解" tabindex="-1">项目结构详解 <a class="header-anchor" href="#项目结构详解" aria-label="Permalink to &quot;项目结构详解&quot;">​</a></h2><p>项目主要分为几个文件夹：</p><ul><li><code>bin/</code>: 用于存放程序入口文件，包含 <code>bin/spc</code>、<code>bin/spc-alpine-docker</code>、<code>bin/setup-runtime</code>。</li><li><code>config/</code>: 包含了所有项目支持的扩展、依赖库以及这些资源下载的地址、下载方式等，分为三个文件：<code>lib.json</code>、<code>ext.json</code>、<code>source.json</code>。</li><li><code>src/SPC/</code>: 项目的核心代码，包含了整个框架以及编译各种扩展和库的命令。</li><li><code>src/globals/</code>: 项目的全局方法和常量、运行时需要的测试文件（例如：扩展的可用性检查代码）。</li><li><code>vendor/</code>: Composer 依赖的目录，你无需对它做出任何修改。</li></ul><p>其中运行原理就是启动一个 <code>symfony/console</code> 的 <code>ConsoleApplication</code>，然后解析用户在终端输入的命令。</p><h3 id="命令行入口和命令" tabindex="-1">命令行入口和命令 <a class="header-anchor" href="#命令行入口和命令" aria-label="Permalink to &quot;命令行入口和命令&quot;">​</a></h3><p><code>bin/spc</code> 是一个 PHP 代码入口文件，包含了 Unix 通用的 <code>#!/usr/bin/env php</code> 用来让系统自动以系统安装好的 PHP 解释器执行。 在项目执行了 <code>new ConsoleApplication()</code> 后，框架会自动使用反射的方式，解析 <code>src/SPC/command</code> 目录下的所有类，并将其注册成为命令。</p><p>项目并没有直接使用 Symfony 推荐的 Command 注册方式和命令执行方式，这里做出了一点小变动：</p><ol><li>每个命令都使用 <code>#[AsCommand()]</code> Attribute 来注册名称和简介。</li><li>将 <code>execute()</code> 抽象化，让所有命令基于 <code>BaseCommand</code>（它基于 <code>Symfony\\Component\\Console\\Command\\Command</code>），每个命令本身的执行代码写到了 <code>handle()</code> 方法中。</li><li><code>BaseCommand</code> 添加了变量 <code>$no_motd</code>，用于是否在该命令执行时显示 Figlet 欢迎词。</li><li><code>BaseCommand</code> 将 <code>InputInterface</code> 和 <code>OutputInterface</code> 保存为成员变量，你可以在命令的类内使用 <code>$this-&gt;input</code> 和 <code>$this-&gt;output</code>。</li></ol><h3 id="doctor-模块" tabindex="-1">Doctor 模块 <a class="header-anchor" href="#doctor-模块" aria-label="Permalink to &quot;Doctor 模块&quot;">​</a></h3><p>Doctor 模块是一个较为独立的用于检查系统环境的模块，可使用命令 <code>bin/spc doctor</code> 进入，入口的命令类在 <code>DoctorCommand.php</code> 中。</p><p>Doctor 模块是一个检查单，里面有一系列的检查项目和自动修复项目。这些项目都存放在 <code>src/SPC/doctor/item/</code> 目录中， 并且使用了两种 Attribute 用作检查项标记和自动修复项目标记：<code>#[AsCheckItem]</code> 和 <code>#[AsFixItem]</code>。</p><p>以现有的检查项 <code>if necessary tools are installed</code>，它是用于检查编译必需的包是否安装在 macOS 系统内，下面是它的源码：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">SPC</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">doctor</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">AsCheckItem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">SPC</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">doctor</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">AsFixItem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">SPC</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">doctor</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">CheckResult</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#[AsCheckItem</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">if necessary tools are installed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">limit_os</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Darwin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">level</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">997</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">checkCliTools</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#FFCB6B;">CheckResult</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">missing </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">self</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">REQUIRED_COMMANDS </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($this-&gt;</span><span style="color:#82AAFF;">findCommand</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">missing</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">empty</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">missing</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CheckResult</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">fail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">missing system commands: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">implode</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">missing</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">build-tools</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[$</span><span style="color:#A6ACCD;">missing</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CheckResult</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">ok</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>属性的第一个参数就是检查项目的名称，后面的 <code>limit_os</code> 参数是限制了该检查项仅在指定的系统下触发，<code>level</code> 是执行该检查项的优先级，数字越大，优先级越高。</p><p>里面用到的 <code>$this-&gt;findCommand()</code> 方法为 <code>SPC\\builder\\traits\\UnixSystemUtilTrait</code> 的方法，用途是查找系统命令所在位置，找不到时返回 NULL。</p><p>每个检查项的方法都应该返回一个 <code>SPC\\doctor\\CheckResult</code>：</p><ul><li>在返回 <code>CheckResult::fail()</code> 时，第一个参数用于输出终端的错误提示，第二个参数是在这个检查项可自动修复时的修复项目名称。</li><li>在返回 <code>CheckResult::ok()</code> 时，表明检查通过。你也可以传递一个参数，用于返回检查结果，例如：<code>CheckResult::ok(&#39;OS supported&#39;)</code>。</li><li>在返回 <code>CheckResult::fail()</code> 时，如果包含了第三个参数，第三个参数的数组将被当作 <code>AsFixItem</code> 的参数。</li></ul><p>下面是这个检查项对应的自动修复项的方法：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#[AsFixItem</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">build-tools</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fixBuildTools</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">array</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">missing</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">bool</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">missing </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">shell</span><span style="color:#89DDFF;">(true)-&gt;</span><span style="color:#82AAFF;">exec</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">brew install </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">escapeshellarg</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">RuntimeException</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>#[AsFixItem()]</code> 属性传入的参数即修复项的名称，该方法必须返回 True 或 False。当返回 False 时，表明自动修复失败，需要手动处理。</p><p>此处的代码中 <code>shell()-&gt;exec()</code> 是项目的执行命令的方法，用于替代 <code>exec()</code>、<code>system()</code>，同时提供了 debug、获取执行状态、进入目录等特性。</p><p>（正在编写，TODO）</p>`,40),p=[e];function c(t,r,D,i,y,F){return a(),o("div",null,p)}const d=s(l,[["render",c]]);export{A as __pageData,d as default};
