import{_ as e,c as a,o,a2 as i}from"./chunks/framework._YPf4yo5.js";const m=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"zh/faq/index.md","filePath":"zh/faq/index.md"}'),s={name:"zh/faq/index.md"},c=i(`<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><p>这里将会编写一些你容易遇到的问题。目前有很多，但是我需要花时间来整理一下。</p><h2 id="静态编译的-php-可以安装扩展吗" tabindex="-1">静态编译的 PHP 可以安装扩展吗 <a class="header-anchor" href="#静态编译的-php-可以安装扩展吗" aria-label="Permalink to &quot;静态编译的 PHP 可以安装扩展吗&quot;">​</a></h2><p>因为传统架构下的 PHP 安装扩展的原理是使用 <code>.so</code> 类型的动态链接的库方式安装新扩展，而使用本项目编译的静态链接的 PHP 无法<strong>直接</strong>使用动态链接库安装新扩展。</p><p>对于 macOS 平台来说，macOS 下的几乎所有二进制文件都无法真正纯静态链接，几乎所有二进制文件都会链接 macOS 的系统库：<code>/usr/lib/libresolv.9.dylib</code> 和 <code>/usr/lib/libSystem.B.dylib</code>。 所以在 macOS 系统下，在特定的编译条件下可以使用静态编译的 php 二进制文件，同时使用动态链接的扩展：</p><ol><li>使用 <code>--no-strip</code> 参数，将不会对二进制文件去除调试符号等信息，以供使用 <code>Xdebug</code> 等外部 Zend 扩展。</li><li>如果要编译某些 Zend 扩展，使用 Homebrew、MacPorts、源码编译的形式，在所在的操作系统安装一个普通版本的 PHP。</li><li>使用 <code>phpize &amp;&amp; ./configure &amp;&amp; make</code> 命令编译想要使用的扩展。</li><li>将扩展文件 <code>xxxx.so</code> 拷贝到外部，使用静态编译的 PHP 二进制，例如使用 Xdebug 扩展：<code>cd buildroot/bin/ &amp;&amp; ./php -d &quot;zend_extension=/path/to/xdebug.so&quot;</code>。</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建静态 php-cli</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/spc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ffi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-strip</span></span></code></pre></div><p>对于 Linux 平台来说，目前的编译结果为纯静态链接的二进制文件，无法使用动态链接库安装新扩展。</p><h2 id="可以支持-oracle-数据库扩展吗" tabindex="-1">可以支持 Oracle 数据库扩展吗 <a class="header-anchor" href="#可以支持-oracle-数据库扩展吗" aria-label="Permalink to &quot;可以支持 Oracle 数据库扩展吗&quot;">​</a></h2><p>部分依赖库闭源的扩展，如 <code>oci8</code>、<code>sourceguardian</code> 等，它们没有提供纯静态编译的依赖库文件（<code>.a</code>），仅提供了动态依赖库文件（<code>.so</code>）， 这些扩展无法使用源码的形式编译到 static-php-cli 中，所以本项目可能永远也不会支持这些扩展。不过，理论上你可以根据上面的问题在 macOS 下接入和使用这类扩展。</p><p>如果你对此类扩展有需求，或者大部分人都对这些闭源扩展使用有需求， 可以看看有关 <a href="https://github.com/crazywhalecc/static-php-cli/discussions/58" target="_blank" rel="noreferrer">standalone-php-cli</a> 的讨论。欢迎留言。</p><h2 id="支持-windows-吗" tabindex="-1">支持 Windows 吗 <a class="header-anchor" href="#支持-windows-吗" aria-label="Permalink to &quot;支持 Windows 吗&quot;">​</a></h2><p>该项目目前已支持 Windows，但支持的扩展数量较少，Windows 的支持并不完美，主要有以下几个问题：</p><ol><li>Windows 的编译流程与 *nix 不同，使用的工具链也不同，编译各个扩展的依赖库使用的编译工具也几乎完全不同。</li><li>Windows 版本的需求也会根据所有使用本项目的人的需求推进，如果有很多人需要，我会尽快支持相关扩展。</li></ol><h2 id="使用-micro-可以保护我的源码吗" tabindex="-1">使用 micro 可以保护我的源码吗 <a class="header-anchor" href="#使用-micro-可以保护我的源码吗" aria-label="Permalink to &quot;使用 micro 可以保护我的源码吗&quot;">​</a></h2><p>不可以。micro.sfx 本质上是将 php 和 php 代码结合为一个文件，没有 PHP 代码编译或加密的过程。 首先 php-src 是 PHP 代码的官方解释器，而且现在市面上还没有一个能兼容主流分支的 PHP 编译器。 之前我在网上看到有一个项目是 BPC（Binary PHP Compiler？）可以把 PHP 编译为二进制，但是限制也是很多很多。</p><p>加密保护代码的方向和编译也不是一回事，编译过后也可以通过逆向工程等方式拿到代码，真正保护还是通过加壳、加密代码等手段进行。</p><p>所以本项目（static-php-cli）、相关项目（lwmbs、swoole-cli）都是提供一个对 php-src 源码的便捷编译工具， 本项目和相关项目引用的 phpmicro 也仅仅是 PHP 的 sapi 接口封装，而不是 PHP 代码的编译工具。 PHP 代码的编译器是完全不同的项目，因此不会考虑额外的情况。如果你对加密感兴趣，可以考虑使用现有的加密技术，如 Swoole Compiler、Source Guardian 等。</p><h2 id="无法使用-ssl" tabindex="-1">无法使用 ssl <a class="header-anchor" href="#无法使用-ssl" aria-label="Permalink to &quot;无法使用 ssl&quot;">​</a></h2><p>使用 curl、pgsql 等 请求 HTTPS 网站或建立 SSL 连接时，可能存在 <code>error:80000002:system library::No such file or directory</code> 错误， 这个错误是由于静态编译的 PHP 未通过 <code>php.ini</code> 指定 <code>openssl.cafile</code> 导致的。</p><p>你可以在使用 PHP 前指定 <code>php.ini</code>，并在 INI 内添加 <code>openssl.cafile=/path/to/your-cert.pem</code> 来解决这个问题。</p><p>对于 Linux 系统，你可以从 curl 官方网站下载 <a href="https://curl.se/docs/caextract.html" target="_blank" rel="noreferrer">cacert.pem</a> 文件，也可以使用系统自带的证书文件。 有关不同发行版的证书位置，可参考 <a href="https://go.dev/src/crypto/x509/root_linux.go" target="_blank" rel="noreferrer">Go 标准库</a>。</p><blockquote><p>INI 配置 <code>openssl.cafile</code> 不可以使用 <code>ini_set()</code> 函数动态设置，因为 <code>openssl.cafile</code> 是一个 <code>PHP_INI_SYSTEM</code> 类型的配置，只能在 <code>php.ini</code> 文件中设置。</p></blockquote>`,23),l=[c];function r(t,p,d,n,h,u){return o(),a("div",null,l)}const b=e(s,[["render",r]]);export{m as __pageData,b as default};
